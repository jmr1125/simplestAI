cmake_minimum_required(VERSION 3.6)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(ENABLE_PICTURE ON)

set(ENABLE_OMP OFF)
set(USE_Opencl ON)
project(myAI)

if(${ENABLE_OMP} AND ${USE_Opencl})
  message(FATAL_ERROR "USE either opencl or openmp")
endif()
# finding OpenMP
if(${ENABLE_OMP})
  if(APPLE)
    execute_process( COMMAND brew --prefix libomp
      OUTPUT_VARIABLE HOMEBREW_LIBOMP_PREFIX
      OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(OpenMP_C_FLAGS
      "-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include/")
    set(OpenMP_CXX_FLAGS
      "-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include/")
    set(OpenMP_C_LIB_NAMES omp)
    set(OpenMP_CXX_LIB_NAMES omp)
    set(OpenMP_omp_LIBRARY ${HOMEBREW_LIBOMP_PREFIX}/lib/libomp.dylib)
    set(${OpenMP_C_INCLUDE_DIR} "${HOMEBREW_LIBOMP_PREFIX}/include")
    set(${OpenMP_CXX_INCLUDE_DIR} "${HOMEBREW_LIBOMP_PREFIX}/include")

    # set(CMAKE_MACOSX_RPATH 1)
  endif()

  find_package(OpenMP REQUIRED)

  message(STATUS --FLAGS---)
  message(STATUS "C  :${OpenMP_C_FLAGS}")
  message(STATUS "CXX:${OpenMP_CXX_FLAGS}")
  message(STATUS --LIBNAME---)
  message(STATUS "C  :${OpenMP_C_LIB_NAMES}")
  message(STATUS "CXX:${OpenMP_CXX_LIB_NAMES}")
  message(STATUS --INCLUDEDIR---)
  message(STATUS "C  :${OpenMP_C_INCLUDE_DIR}")
  message(STATUS "CXX:${OpenMP_CXX_INCLUDE_DIR}")
  message(STATUS "LIB:${OpenMP_omp_LIBRARY}")
  message(STATUS ------)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  message(STATUS "enable omp")
  message(STATUS "enable omp:${ENABLE_OMP}")
  message(STATUS "use omp:${USE_OMP}")
  message(STATUS "omp cxx found:${OpenMP_CXX_FOUND}")
  message(STATUS "has omp")
  set(USE_OMP ON)
  add_definitions(-DUSE_OMP)
endif()
# end OpenMP

#find ncurses
find_package(Curses REQUIRED)
if(${CURSES_FOUND})
  message(STATUS "has ncurses")
  message(STATUS "INCLUDE DIR: ${CURSES_INCLUDE_DIR}")
  message(STATUS "LIBRARY DIR: ${NCURSES_LIBRARIES}")
  include_directories(${NCURSES_INCLUDE_DIR})
else()
  message(FATAL_ERROR "has NO ncurses")
endif()
#end ncurses


#find OpenCL
if(USE_Opencl)
  find_package(OpenCL REQUIRED)
  message(STATUS "OpenCL: ${OpenCL_FOUND}")
  message(STATUS "dirs: ${OpenCL_INCLUDE_DIRS}")
  message(STATUS "libs: ${OpenCL_LIBRARIES}")
  message(STATUS "dir: ${OpenCL_INCLUDE_DIR}")
  message(STATUS "lib: ${OpenCL_LIBRARY}")
  add_definitions(-DUSE_OCL)
  include_directories(${OpenCL_INCLUDE_DIRS})
  link_libraries(${OpenCL_LIBRARY})
  list(APPEND STANDARD_CPPS "clGetErrorString.cpp")
  list(APPEND STANDARD_CPPS "cl-mat.cpp")
endif()
#end OpenCL

list(APPEND STANDARD_CPPS "matrix.cpp")
list(APPEND STANDARD_CPPS "convolution.cpp")
list(APPEND STANDARD_CPPS "matrix.cpp")
list(APPEND STANDARD_CPPS "matrix_layer.cpp")
list(APPEND STANDARD_CPPS "bias_layer.cpp")
list(APPEND STANDARD_CPPS "func_layer.cpp")
list(APPEND STANDARD_CPPS "convolution_layer.cpp")
list(APPEND STANDARD_CPPS "NN.cpp")

message(STATUS "standard cpps : ${STANDARD_CPPS}")
add_executable(trainemnistconvolution trainemnist.cpp ${STANDARD_CPPS})
add_executable(generateemnistconvolution generateemnist.cpp ${STANDARD_CPPS})
target_link_libraries(generateemnistconvolution ${CURSES_LIBRARIES})

message(STATUS "picture:")
if(${ENABLE_PICTURE})
  message(STATUS "enable picture")
  find_package(X11 REQUIRED)
  link_libraries(${X11_LIBRARIES})
  include_directories(${X11_INCLUDE_DIR})
  # TODO picture learnpicture
else()
  message(STATUS "disable picture")
endif()

if(${USE_OMP})
  message(STATUS "use omp")
  target_link_libraries(train OpenMP::OpenMP_CXX)
  target_link_libraries(trainmnist OpenMP::OpenMP_CXX)
  target_link_libraries(generate OpenMP::OpenMP_CXX)
  target_link_libraries(trainemnist OpenMP::OpenMP_CXX)
  target_link_libraries(generateemnist OpenMP::OpenMP_CXX)
  if(${ENABLE_PICTURE})
    message("use picture")
    target_link_libraries(learnpicture OpenMP::OpenMP_CXX)
  endif()
endif()
