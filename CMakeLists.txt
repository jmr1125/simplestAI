cmake_minimum_required(VERSION 3.3)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
project(myAI)
if(APPLE)
execute_process( COMMAND brew --prefix libomp
		OUTPUT_VARIABLE HOMEBREW_LIBOMP_PREFIX
		OUTPUT_STRIP_TRAILING_WHITESPACE)
set(OpenMP_C_FLAGS
"-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include/")
set(OpenMP_CXX_FLAGS
"-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include/")
set(OpenMP_C_LIB_NAMES omp)
set(OpenMP_CXX_LIB_NAMES omp)
set(OpenMP_omp_LIBRARY ${HOMEBREW_LIBOMP_PREFIX}/lib/libomp.dylib)
set(${OpenMP_C_INCLUDE_DIR} "${HOMEBREW_LIBOMP_PREFIX}/include")
set(${OpenMP_CXX_INCLUDE_DIR} "${HOMEBREW_LIBOMP_PREFIX}/include")
endif()
find_package(OpenMP)

message(STATUS --FLAGS---)
message(STATUS "C  :${OpenMP_C_FLAGS}")
message(STATUS "CXX:${OpenMP_CXX_FLAGS}")
message(STATUS --LIBNAME---)
message(STATUS "C  :${OpenMP_C_LIB_NAMES}")
message(STATUS "CXX:${OpenMP_CXX_LIB_NAMES}")
message(STATUS --INCLUDEDIR---)
message(STATUS "C  :${OpenMP_C_INCLUDE_DIR}")
message(STATUS "CXX:${OpenMP_CXX_INCLUDE_DIR}")
message(STATUS "LIB:${OpenMP_omp_LIBRARY}")
message(STATUS ------)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
option(ENABLE_OMP ON)
if(${ENABLE_OMP})
message(STATUS "enable omp")
endif()
message(STATUS "enable omp:${ENABLE_OMP}")
message(STATUS "use omp:${USE_OMP}")
message(STATUS "omp cxx found:${OpenMP_CXX_FOUND}")
if((${OpenMP_CXX_FOUND}) AND (${ENABLE_OMP}))
message(STATUS "has omp")
set(USE_OMP ON)
add_definitions(-DUSE_OMP)
else()
message(STATUS "no omp")
set(USE_OMP OFF)
endif()

find_package(Curses REQUIRED)
if(${CURSES_FOUND})
message(STATUS "has ncurses")
message(STATUS "INCLUDE DIR: ${CURSES_INCLUDE_DIR}")
message(STATUS "LIBRARY DIR: ${NCURSES_LIBRARIES}")
include_directories(${NCURSES_INCLUDE_DIR})
else()
message(FATAL_ERROR "has NO ncurses")
endif()

set(BUILD_TEST ON)
if(${BUILD_TEST})
add_executable(test2 test2.cpp matrix.cpp layer.cpp network.cpp)
add_executable(test4 testtrain.cpp train.cpp matrix.cpp layer.cpp network.cpp)
add_executable(test3 testmouse.cpp)
add_executable(test5 testsave.cpp matrix.cpp layer.cpp network.cpp)
target_link_libraries(test3 ${CURSES_LIBRARIES})
if(${USE_OMP})
add_executable(test1 testomp.cpp)
target_link_libraries(test1 OpenMP::OpenMP_CXX)
target_link_libraries(test4 OpenMP::OpenMP_CXX)
endif()
endif()

add_executable(train train1.cpp train.cpp matrix.cpp layer.cpp network.cpp)
add_executable(drawdata data.cpp)
if(${USE_OMP})
target_link_libraries(train OpenMP::OpenMP_CXX)
endif()
target_link_libraries(drawdata ${CURSES_LIBRARIES})
target_link_libraries(train ${NCURSES_LIBRARIES})
